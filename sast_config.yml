# Static Application Security Testing (SAST) Configuration
# This file configures security analysis tools for the Network Mapper project

# Bandit Configuration (Python Security Linter)
bandit:
  # Test configuration
  tests:
    - B101  # Test for use of assert
    - B102  # Test for exec used
    - B103  # Test for set_bad_file_permissions
    - B104  # Test for hardcoded_bind_all_interfaces
    - B105  # Test for hardcoded_password_string
    - B106  # Test for hardcoded_password_funcarg
    - B107  # Test for hardcoded_password_default
    - B108  # Test for hardcoded_tmp_directory
    - B110  # Test for try_except_pass
    - B112  # Test for try_except_continue
    - B201  # Test for flask_debug_true
    - B301  # Test for pickle
    - B302  # Test for marshal
    - B303  # Test for md5
    - B304  # Test for des
    - B305  # Test for cipher
    - B306  # Test for mktemp_q
    - B307  # Test for eval
    - B308  # Test for mark_safe
    - B309  # Test for httpsconnection
    - B310  # Test for urllib_urlopen
    - B311  # Test for random
    - B312  # Test for telnetlib
    - B313  # Test for xml_bad_cElementTree
    - B314  # Test for xml_bad_ElementTree
    - B315  # Test for xml_bad_expatreader
    - B316  # Test for xml_bad_expatbuilder
    - B317  # Test for xml_bad_sax
    - B318  # Test for xml_bad_minidom
    - B319  # Test for xml_bad_pulldom
    - B320  # Test for xml_bad_etree
    - B321  # Test for ftplib
    - B322  # Test for input
    - B323  # Test for unverified_context
    - B324  # Test for hashlib_new_insecure_functions
    - B325  # Test for tempnam
    - B401  # Test for import_telnetlib
    - B402  # Test for import_ftplib
    - B403  # Test for import_pickle
    - B404  # Test for import_subprocess
    - B405  # Test for import_xml_etree
    - B406  # Test for import_xml_sax
    - B407  # Test for import_xml_expat
    - B408  # Test for import_xml_minidom
    - B409  # Test for import_xml_pulldom
    - B410  # Test for import_lxml
    - B411  # Test for import_xmlrpclib
    - B412  # Test for import_httpoxy
    - B413  # Test for import_pycrypto
    - B501  # Test for request_with_no_cert_validation
    - B502  # Test for ssl_with_bad_version
    - B503  # Test for ssl_with_bad_defaults
    - B504  # Test for ssl_with_no_version
    - B505  # Test for weak_cryptographic_key
    - B506  # Test for yaml_load
    - B507  # Test for ssh_no_host_key_verification
    - B601  # Test for paramiko_calls
    - B602  # Test for subprocess_popen_with_shell_equals_true
    - B603  # Test for subprocess_without_shell_equals_false
    - B604  # Test for any_other_function_with_shell_equals_true
    - B605  # Test for start_process_with_a_shell
    - B606  # Test for start_process_with_no_shell
    - B607  # Test for start_process_with_partial_path
    - B608  # Test for hardcoded_sql_expressions
    - B609  # Test for linux_commands_wildcard_injection
    - B610  # Test for django_extra_used
    - B611  # Test for django_rawsql_used
    - B701  # Test for jinja2_autoescape_false
    - B702  # Test for use_of_mako_templates
    - B703  # Test for django_mark_safe

  # Skip paths
  skips:
    - "*/tests/*"
    - "*/test_*.py"
    - "*/venv/*"
    - "*/__pycache__/*"

  # Severity levels
  severity:
    low: []
    medium: []
    high: []

# Safety Configuration (Dependency Vulnerability Scanner)
safety:
  # Check for known security vulnerabilities in dependencies
  ignore_ids: []  # Add CVE IDs to ignore if needed
  
  # Output format
  output: json
  
  # Check development dependencies
  dev_deps: true

# Semgrep Configuration (Advanced SAST)
semgrep:
  # Rulesets to use
  rulesets:
    - "p/security-audit"
    - "p/owasp-top-ten"
    - "p/python"
    - "p/command-injection"
    - "p/sql-injection"
    - "p/xss"
    - "p/secrets"
    
  # Custom rules directory
  rules_dir: "security_rules/"
  
  # Exclude patterns
  exclude:
    - "tests/"
    - "*.pyc"
    - "__pycache__/"
    - ".git/"
    - "venv/"
    - ".venv/"

# Security Checklist
security_checklist:
  input_validation:
    - "All user inputs are validated and sanitized"
    - "SQL injection prevention implemented"
    - "Command injection prevention implemented"
    - "Path traversal prevention implemented"
    - "XSS prevention implemented"
  
  authentication:
    - "Strong password policies enforced"
    - "Multi-factor authentication supported"
    - "Session management secure"
    - "Account lockout mechanisms"
  
  authorization:
    - "Principle of least privilege applied"
    - "Role-based access control implemented"
    - "Resource access properly controlled"
  
  cryptography:
    - "Strong encryption algorithms used"
    - "Proper key management implemented"
    - "Secure random number generation"
    - "Certificate validation enforced"
  
  logging:
    - "Security events logged"
    - "Log tampering prevention"
    - "Sensitive data not logged"
    - "Log retention policies defined"
  
  error_handling:
    - "Information disclosure prevented"
    - "Graceful error handling"
    - "Stack traces not exposed"
  
  configuration:
    - "Secure defaults implemented"
    - "Unnecessary features disabled"
    - "Security headers configured"
    - "File permissions properly set"

# OWASP Top 10 Compliance Mapping
owasp_top10_2021:
  A01_broken_access_control:
    - "Access control checks implemented"
    - "Default deny policy"
    - "CORS properly configured"
  
  A02_cryptographic_failures:
    - "Data encrypted in transit and at rest"
    - "Strong cryptographic algorithms"
    - "Proper key management"
  
  A03_injection:
    - "Input validation implemented"
    - "Parameterized queries used"
    - "Command injection prevention"
  
  A04_insecure_design:
    - "Threat modeling performed"
    - "Secure design patterns used"
    - "Security requirements defined"
  
  A05_security_misconfiguration:
    - "Secure configuration baselines"
    - "Regular security updates"
    - "Unnecessary features disabled"
  
  A06_vulnerable_components:
    - "Dependency vulnerability scanning"
    - "Component inventory maintained"
    - "Regular updates applied"
  
  A07_identification_failures:
    - "Strong authentication mechanisms"
    - "Session management secure"
    - "Multi-factor authentication"
  
  A08_software_integrity_failures:
    - "Code signing implemented"
    - "Dependency integrity checks"
    - "Secure CI/CD pipeline"
  
  A09_logging_failures:
    - "Comprehensive security logging"
    - "Log monitoring implemented"
    - "Incident response procedures"
  
  A10_server_side_request_forgery:
    - "URL validation implemented"
    - "Network segmentation"
    - "Allowlist approach used"

# Automated Security Testing Commands
automation:
  commands:
    bandit: "bandit -r . -f json -o bandit_report.json"
    safety: "safety check --json --output safety_report.json"
    semgrep: "semgrep --config=auto --json --output=semgrep_report.json ."
    pytest_security: "python -m pytest tests/test_security.py -v --tb=short"
  
  # CI/CD Integration
  ci_commands:
    pre_commit: |
      bandit -r . -ll
      safety check
      semgrep --config=auto --error .
    
    security_gate: |
      python tests/test_security.py
      bandit -r . -f json -o reports/bandit.json
      safety check --json --output reports/safety.json
      semgrep --config=auto --json --output=reports/semgrep.json .

# Security Metrics
metrics:
  coverage_threshold: 80  # Minimum security test coverage
  vulnerability_threshold: 0  # Maximum allowed high/critical vulnerabilities
  code_quality_threshold: 8.0  # Minimum code quality score