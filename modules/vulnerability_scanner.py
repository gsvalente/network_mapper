"""
Vulnerability Scanner Module

This module handles vulnerability assessment and database management
for the Network Mapper tool.
"""

class VulnerabilityScanner:
    """
    Handles vulnerability assessment for discovered services
    """
    
    def __init__(self):
        self.vulnerability_db = self._load_vulnerability_database()
    
    def _load_vulnerability_database(self):
        """Load vulnerability information for common services"""
        return {
            21: {
                "service": "FTP",
                "vulnerabilities": [
                    "Anonymous login may be enabled",
                    "Brute force attacks possible",
                    "Unencrypted data transmission",
                    "Directory traversal vulnerabilities"
                ],
                "attack_vectors": ["Brute force", "Anonymous access", "Man-in-the-middle"]
            },
            22: {
                "service": "SSH",
                "vulnerabilities": [
                    "Weak authentication methods",
                    "Brute force attacks possible",
                    "Outdated SSH versions may have CVEs"
                ],
                "attack_vectors": ["Brute force", "Key-based attacks", "Protocol downgrade"]
            },
            23: {
                "service": "Telnet",
                "vulnerabilities": [
                    "Unencrypted communication",
                    "Credentials sent in plaintext",
                    "No authentication encryption"
                ],
                "attack_vectors": ["Credential sniffing", "Man-in-the-middle", "Session hijacking"]
            },
            25: {
                "service": "SMTP",
                "vulnerabilities": [
                    "Open relay configuration",
                    "Email spoofing possible",
                    "User enumeration via VRFY/EXPN"
                ],
                "attack_vectors": ["Email spoofing", "Spam relay", "User enumeration"]
            },
            53: {
                "service": "DNS",
                "vulnerabilities": [
                    "DNS cache poisoning",
                    "Zone transfer attacks",
                    "DNS amplification attacks"
                ],
                "attack_vectors": ["Cache poisoning", "Zone transfer", "DDoS amplification"]
            },
            80: {
                "service": "HTTP",
                "vulnerabilities": [
                    "Unencrypted web traffic",
                    "Web application vulnerabilities",
                    "Information disclosure"
                ],
                "attack_vectors": ["Web app attacks", "Traffic interception", "XSS/SQLi"]
            },
            110: {
                "service": "POP3",
                "vulnerabilities": [
                    "Unencrypted email retrieval",
                    "Credentials sent in plaintext",
                    "Email content exposure"
                ],
                "attack_vectors": ["Credential sniffing", "Email interception", "Brute force"]
            },
            135: {
                "service": "RPC",
                "vulnerabilities": [
                    "RPC endpoint enumeration",
                    "Buffer overflow vulnerabilities",
                    "Privilege escalation possible"
                ],
                "attack_vectors": ["RPC enumeration", "Buffer overflow", "Privilege escalation"]
            },
            139: {
                "service": "NetBIOS",
                "vulnerabilities": [
                    "SMB relay attacks",
                    "Null session enumeration",
                    "Share enumeration"
                ],
                "attack_vectors": ["SMB relay", "Null sessions", "Share enumeration"]
            },
            143: {
                "service": "IMAP",
                "vulnerabilities": [
                    "Unencrypted email access",
                    "Credentials in plaintext",
                    "Email content exposure"
                ],
                "attack_vectors": ["Credential sniffing", "Email interception", "Brute force"]
            },
            443: {
                "service": "HTTPS",
                "vulnerabilities": [
                    "SSL/TLS configuration issues",
                    "Weak cipher suites",
                    "Certificate validation bypass"
                ],
                "attack_vectors": ["SSL/TLS attacks", "Certificate spoofing", "Weak encryption"]
            },
            445: {
                "service": "SMB",
                "vulnerabilities": [
                    "SMB relay attacks",
                    "EternalBlue (MS17-010)",
                    "Share enumeration and access"
                ],
                "attack_vectors": ["SMB relay", "EternalBlue exploit", "Share enumeration"]
            },
            993: {
                "service": "IMAPS",
                "vulnerabilities": [
                    "SSL/TLS configuration issues",
                    "Weak cipher suites",
                    "Certificate validation bypass"
                ],
                "attack_vectors": ["SSL/TLS attacks", "Certificate spoofing", "Brute force"]
            },
            995: {
                "service": "POP3S",
                "vulnerabilities": [
                    "SSL/TLS configuration issues",
                    "Weak cipher suites",
                    "Certificate validation bypass"
                ],
                "attack_vectors": ["SSL/TLS attacks", "Certificate spoofing", "Brute force"]
            },
            1433: {
                "service": "MSSQL",
                "vulnerabilities": [
                    "SQL injection vulnerabilities",
                    "Weak authentication",
                    "Database enumeration"
                ],
                "attack_vectors": ["SQL injection", "Brute force", "Database enumeration"]
            },
            1723: {
                "service": "PPTP",
                "vulnerabilities": [
                    "Weak encryption (MPPE)",
                    "Authentication bypass",
                    "VPN tunnel attacks"
                ],
                "attack_vectors": ["Encryption attacks", "Authentication bypass", "Tunnel hijacking"]
            },
            3306: {
                "service": "MySQL",
                "vulnerabilities": [
                    "SQL injection vulnerabilities",
                    "Weak root passwords",
                    "Database enumeration"
                ],
                "attack_vectors": ["SQL injection", "Brute force", "Database enumeration"]
            },
            3389: {
                "service": "RDP",
                "vulnerabilities": [
                    "BlueKeep (CVE-2019-0708)",
                    "Brute force attacks",
                    "Man-in-the-middle attacks"
                ],
                "attack_vectors": ["BlueKeep exploit", "Brute force", "Session hijacking"]
            },
            5432: {
                "service": "PostgreSQL",
                "vulnerabilities": [
                    "SQL injection vulnerabilities",
                    "Weak authentication",
                    "Database enumeration"
                ],
                "attack_vectors": ["SQL injection", "Brute force", "Database enumeration"]
            },
            5900: {
                "service": "VNC",
                "vulnerabilities": [
                    "Weak or no authentication",
                    "Unencrypted screen sharing",
                    "Remote access vulnerabilities"
                ],
                "attack_vectors": ["Unauthorized access", "Screen capture", "Remote control"]
            },
            6379: {
                "service": "Redis",
                "vulnerabilities": [
                    "No authentication by default",
                    "Command injection",
                    "Data exposure"
                ],
                "attack_vectors": ["Unauthorized access", "Command injection", "Data exfiltration"]
            },
            8080: {
                "service": "HTTP-Alt",
                "vulnerabilities": [
                    "Web application vulnerabilities",
                    "Administrative interfaces exposed",
                    "Unencrypted traffic"
                ],
                "attack_vectors": ["Web app attacks", "Admin panel access", "Traffic interception"]
            }
        }
    
    def assess_vulnerabilities(self, host, open_ports, services=None):
        """
        Assess vulnerabilities for a host based on open ports and services
        
        Args:
            host (str): Target host IP address
            open_ports (list): List of open ports
            services (dict): Dictionary of port -> service information
            
        Returns:
            dict: Vulnerability assessment results
        """
        if not open_ports:
            return {
                'vulnerabilities': [],
                'risk_level': 'Info',
                'summary': 'No open ports detected'
            }
        
        all_vulnerabilities = []
        
        for port in open_ports:
            service_info = services.get(port, "") if services else ""
            
            if port in self.vulnerability_db:
                vuln_data = self.vulnerability_db[port].copy()
                vuln_data["risk_level"] = self._calculate_risk_level(port, service_info)
                vuln_data['port'] = port
                vuln_data['service_info'] = service_info
                all_vulnerabilities.append(vuln_data)
        
        # Calculate overall risk level
        risk_level = self._calculate_overall_risk_level(all_vulnerabilities)
        
        # Generate summary
        summary = self._format_vulnerability_summary(all_vulnerabilities)
        
        return {
            'vulnerabilities': all_vulnerabilities,
            'risk_level': risk_level,
            'summary': summary,
            'host': host,
            'total_vulnerable_ports': len(all_vulnerabilities)
        }
    
    def _calculate_risk_level(self, port, service_info=""):
        """
        Calculate risk level based on port and service information
        
        Args:
            port (int): Port number
            service_info (str): Service information
            
        Returns:
            str: Risk level (High, Medium, Low)
        """
        # High-risk services
        high_risk_ports = [21, 23, 135, 139, 445, 3389, 5900, 6379]
        
        # Medium-risk services
        medium_risk_ports = [22, 25, 53, 110, 143, 993, 995, 1433, 1723, 3306, 5432]
        
        # Check for specific high-risk indicators in service info
        high_risk_indicators = [
            "anonymous", "default", "weak", "unencrypted", 
            "plaintext", "no auth", "open relay"
        ]
        
        service_lower = service_info.lower()
        
        if port in high_risk_ports:
            return "High"
        elif port in medium_risk_ports:
            return "Medium"
        elif any(indicator in service_lower for indicator in high_risk_indicators):
            return "High"
        else:
            return "Low"
    
    def _calculate_overall_risk_level(self, vulnerabilities):
        """Calculate overall risk level based on all vulnerabilities found"""
        if not vulnerabilities:
            return "Info"
        
        risk_levels = [vuln.get('risk_level', 'Low') for vuln in vulnerabilities]
        
        if 'High' in risk_levels:
            return 'High'
        elif 'Medium' in risk_levels:
            return 'Medium'
        elif 'Low' in risk_levels:
            return 'Low'
        else:
            return 'Info'
    
    def _format_vulnerability_summary(self, vulnerabilities):
        """Format vulnerability summary for display"""
        if not vulnerabilities:
            return "No vulnerabilities detected"
        
        summary_parts = []
        for vuln in vulnerabilities:
            service = vuln.get('service', 'Unknown')
            port = vuln.get('port', 'Unknown')
            summary_parts.append(f"{service} (Port {port})")
        
        return f"{len(vulnerabilities)} vulnerable services: {', '.join(summary_parts)}"
    
    def get_vulnerability_database(self):
        """Get the vulnerability database for external use"""
        return self.vulnerability_db
    
    def get_service_name(self, port):
        """
        Get service name for a given port
        
        Args:
            port (int): Port number
            
        Returns:
            str: Service name
        """
        if port in self.vulnerability_db:
            return self.vulnerability_db[port]["service"]
        return "Unknown"
    
    def get_critical_vulnerabilities(self, port):
        """
        Get critical vulnerabilities for a service
        
        Args:
            port (int): Port number
            
        Returns:
            list: List of critical vulnerabilities
        """
        if port not in self.vulnerability_db:
            return []
        
        vulnerabilities = self.vulnerability_db[port]["vulnerabilities"]
        
        # Filter for critical vulnerabilities (containing specific keywords)
        critical_keywords = [
            "CVE", "exploit", "buffer overflow", "injection", 
            "bypass", "escalation", "anonymous", "plaintext"
        ]
        
        critical_vulns = []
        for vuln in vulnerabilities:
            if any(keyword.lower() in vuln.lower() for keyword in critical_keywords):
                critical_vulns.append(vuln)
        
        return critical_vulns if critical_vulns else vulnerabilities[:2]  # Return first 2 if no critical found
    
    def format_vulnerability_summary(self, port, service_info=""):
        """
        Format a concise vulnerability summary for reporting
        
        Args:
            port (int): Port number
            service_info (str): Service information
            
        Returns:
            str: Formatted vulnerability summary
        """
        assessment = self.assess_vulnerabilities(port, service_info)
        service_name = assessment["service"]
        risk_level = assessment["risk_level"]
        
        # Get the most critical vulnerability
        critical_vulns = self.get_critical_vulnerabilities(port)
        main_vuln = critical_vulns[0] if critical_vulns else "Standard service risks"
        
        # Shorten the vulnerability description
        if len(main_vuln) > 30:
            main_vuln = main_vuln[:27] + "..."
        
        # Format based on risk level
        if risk_level == "High":
            return f"{service_name}: {main_vuln} (HIGH RISK)"
        elif risk_level == "Medium":
            return f"{service_name}: {main_vuln} (MEDIUM)"
        else:
            return f"{service_name}: {service_info}" if service_info else f"{service_name}: Standard risks"